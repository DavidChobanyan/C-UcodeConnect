!<arch>
mx_atoi.c/      0           0     0     644     527       `
#include <stdbool.h>

bool mx_isspace(char c);

int mx_atoi(const char*str){
	int result = 0;
	int i = 0;
	int check = 1;
	if(str[i] == '-'){
                        check *= -1;
                        i++;
        }

	while(str[i] != '\0'){
		if(mx_isspace(str[i])){
			i++;
			continue;		
		}
		else if(str[i] >= '0' && str[i] <= '9') break;
		else return 0;	
	}
	while(str[i] != '\0'){
		if(str[i] >= '0' && str[i] <= '9'){
			result *= 10;
			result += str[i] - 48;
			i++;
		}
		else break;
	}
	return result * check;
}


mx_isdigit.c/   0           0     0     644     162       `
#include <stdbool.h>

bool mx_isdigit(int c);

bool mx_isdigit(int c){
	if((c >= 32 && c <= 47) || (c >= 58 && c <= 127))
		return false;
	else
		return true;
}

mx_isspace.c/   0           0     0     644     312       `
#include <stdbool.h>

bool mx_isspace(char c){
	if(c == ' ')
		return 1;
	else if(c == '\f')
		return 1;
	else if(c == '\n')
                return 1;
	else if(c == '\r')
                return 1;
	else if(c == '\t')
                return 1;
	else if(c == '\v')
                return 1;
	else
		return 0;


}

mx_printchar.c/ 0           0     0     644     71        `
#include <unistd.h>

void mx_printchar(char s){
	write(1, &s, 1);
	
}


mx_printint.c/  0           0     0     644     492       `
void mx_printchar(char s);

void mx_printint(int n){
        int t = 0;
        int counter = 1;

        while(counter < n)
                counter *= 10;

        while (n != 0){
                t = (t * 10) + n%10;
                n /= 10;
        }

        while (t != 0){
                mx_printchar((t%10) + 48);
                t /= 10;
                counter /=10;
        }
        while(counter > 1){
                mx_printchar(48);
                counter /= 10;
        }
}

mx_printstr.c/  0           0     0     644     119       `
#include <unistd.h>

int mx_strlen(const char *s);

void mx_printstr(const char *s){
    write(1, s, mx_strlen(s));
}


mx_strcmp.c/    0           0     0     644     179       `
int mx_strcmp(const char* s1, const char* s2) {
	int i = 0;
	
	while(s1[i] != '\0' && s1[i] != '\0') {
		if(s1[i] != s2[i]) {
			return s1[i] - s2[i];
		}
		i++;
	}
	return 0;
}


mx_strcpy.c/    0           0     0     644     159       `
char *mx_strcpy(char*dst, const char*src);

char*mx_strcpy(char*dst, const char*src)
{
	for(int a = 0; src[a] != '\0'; a++)
		dst[a] = src[a];
	return dst;
}


mx_strlen.c/    0           0     0     644     141       `
int mx_strlen(const char*s)
{
	int check = 0;

	do{
		if(s[check] == '\0')
			break;
		check++;
	}while(s[check] != '\0');
	return check;
}


